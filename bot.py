import logging
import sqlite3
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters

logging.basicConfig(level=logging.INFO)

TOKEN = '7415395822:AAFbLJzeX9Q81zsCq76V_Nh0J-AEJgjhv2o'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def ensure_table_exists():
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_name TEXT,
            theme TEXT,
            description TEXT,
            order_number INTEGER,
            status TEXT DEFAULT 'Working'  -- –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞
        )
    ''')

    cursor.execute("PRAGMA table_info(orders)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'image' not in columns:
        cursor.execute('ALTER TABLE orders ADD COLUMN image TEXT')

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è üìñ", callback_data="rules")],
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõí", callback_data="order")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å ‚ùì", callback_data="help")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É üîé", callback_data="search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='''
–ü—Ä–∏–≤–µ—Ç! –Ø –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–µ–¥—å –µ—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞, –æ–Ω –Ω–µ –¥–æ–π–¥—ë—Ç –¥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
''', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â–∞—è –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def rules(update, context):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='''
·¥õ·¥á·¥ã·¥Ñ·¥õ –Ω—É–∂–Ω–æ –æ…∏–æ·¥© ç·¥ß—è·¥õ—å ·¥Ñ·¥õ·¥©–æ·¥¶–æ ·¥®–æ ·¥®·¥©–∏ ç·¥á·¥©—É ·¥Ñ–Ω–∏–∑—É.·êü
‚åû ·¥®·¥á·¥© ô·¥Ä—è ·¥Ñ·¥õ·¥©–æ·¥ã·¥Ä‚åù
    ‚ï∞‚îà‚û§·¥õ·¥á ç·¥Ä –∑·¥Ä·¥ã·¥Ä–∑·¥Ä
‚åû  ô·¥õ–æ·¥©·¥Ä—è –∏ ·¥®–æ·¥Ñ·¥ß·¥á–¥—É—é—â–∏·¥á ·¥Ñ·¥õ·¥©–æ·¥ã–∏‚åù
    ‚ï∞‚îà‚û§–æ·¥®–∏·¥Ñ·¥Ä–Ω–∏·¥á –∑·¥Ä·¥ã·¥Ä–∑·¥Ä
‚åû  ô·¥ß–æ–∂·¥á–Ω–∏—è‚åù
   ‚ï∞‚îà‚û§…∏–æ·¥õ–æ·¥¶·¥©·¥Ä…∏–∏–∏  ‚úÖ
   ‚ï∞‚îà‚û§·¥¶–æ·¥ß–æ·¥Ñ–æ ô—ã·¥á ‚ùå
''', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def order(update, context):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¢–µ–º–∞ –∑–∞–∫–∞–∑–∞\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.',
                                   reply_markup=reply_markup)
    context.user_data['can_submit_order'] = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–∫–∞–∑–∞


# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async def help(update, context):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='''
·¥®–æ ·¥õ·¥á—Ö–Ω–∏—á·¥á·¥Ñ·¥ã–∏ ç  ô–æ·¥®·¥©–æ·¥Æ·¥Ä ç
@·¥Ö·¥Ä…¥·¥Ñ·¥á«´«´
·¥®–æ  ô–æ·¥®·¥©–æ·¥Ñ·¥Ä ç –∑·¥Ä·¥ã·¥Ä–∑–æ ô 
@…¥·¥ás ú·¥ú·¥ç…™…™
''', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
async def search_order(update, context):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:',
                                   reply_markup=reply_markup)
    context.user_data['waiting_for_order_number'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
async def handle_order_number(update, context):
    order_number = update.message.text
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()

    cursor.execute('SELECT user_name, theme, description, status FROM orders WHERE order_number = ?', (order_number,))
    order = cursor.fetchone()

    if order:
        user_name, theme, description, status = order
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f'–ó–∞–∫–∞–∑ ‚Ññ{order_number}\n'
                                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_name}\n'
                                            f'–¢–µ–º–∞: {theme}\n'
                                            f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n'
                                            f'–°—Ç–∞—Ç—É—Å: {status}')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f'–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    conn.close()
    context.user_data['waiting_for_order_number'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    ensure_table_exists()
    if context.user_data.get('waiting_for_order_number'):
        await handle_order_number(update, context)
    elif context.user_data.get('can_submit_order'):
        text = update.message.text
        user_name = update.message.from_user.username
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 5-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        order_number = random.randint(10000, 99999)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        lines = text.split('\n')
        theme = lines[0]
        description = '\n'.join(lines[1:])
        cursor.execute('INSERT INTO orders (user_name, theme, description, order_number) VALUES (?,?,?,?)',
                       (user_name, theme, description, order_number))
        conn.commit()
        conn.close()
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
        context.user_data['can_submit_order'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update, context):
    query = update.callback_query
    await query.answer()
    if query.data == "rules":
        await rules(update, context)
    elif query.data == "order":
        await order(update, context)
    elif query.data == "help":
        await help(update, context)
    elif query.data == "search":
        context.user_data['waiting_for_order_number'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è
        await search_order(update, context)
    elif query.data == "start":
        context.user_data['waiting_for_order_number'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è
        await start(update, context)


# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    button_handler = CallbackQueryHandler(button)
    application.add_handler(button_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)
    application.add_handler(message_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
